import { UserService } from './user.service';
import { SignUpDto } from './dto/sign_up.user.dto';
import mongoose from 'mongoose';
import { VerifyOtpDto } from './dto/otp.verification';
import { LoginDto } from './dto/login.dto';
export declare class UserController {
    private readonly userService;
    constructor(userService: UserService);
    signUpUser(signUpDto: SignUpDto): Promise<{
        message: string;
        data: {
            name: string;
            contactNumber: number;
            profilePic: string;
            role: "admin" | "user" | "super-admin" | "driver";
            isVerified: boolean;
            refreshToken: string;
            otp?: string;
            otpExpiresAt?: Date;
            vehicleDetails?: mongoose.Types.ObjectId;
            createdAt: Date;
            URL: string;
            alinkColor: string;
            all: HTMLAllCollection;
            anchors: HTMLCollectionOf<HTMLAnchorElement>;
            applets: HTMLCollection;
            bgColor: string;
            body: HTMLElement;
            characterSet: string;
            charset: string;
            compatMode: string;
            contentType: string;
            cookie: string;
            currentScript: HTMLOrSVGScriptElement | null;
            defaultView: (WindowProxy & typeof globalThis) | null;
            designMode: string;
            dir: string;
            doctype: DocumentType | null;
            documentElement: HTMLElement;
            documentURI: string;
            domain: string;
            embeds: HTMLCollectionOf<HTMLEmbedElement>;
            fgColor: string;
            forms: HTMLCollectionOf<HTMLFormElement>;
            fragmentDirective: FragmentDirective;
            fullscreen: boolean;
            fullscreenEnabled: boolean;
            head: HTMLHeadElement;
            hidden: boolean;
            images: HTMLCollectionOf<HTMLImageElement>;
            implementation: DOMImplementation;
            inputEncoding: string;
            lastModified: string;
            linkColor: string;
            links: HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>;
            get location(): Location;
            set location(href: string);
            onfullscreenchange: ((this: Document, ev: Event) => any) | null;
            onfullscreenerror: ((this: Document, ev: Event) => any) | null;
            onpointerlockchange: ((this: Document, ev: Event) => any) | null;
            onpointerlockerror: ((this: Document, ev: Event) => any) | null;
            onreadystatechange: ((this: Document, ev: Event) => any) | null;
            onvisibilitychange: ((this: Document, ev: Event) => any) | null;
            ownerDocument: null;
            pictureInPictureEnabled: boolean;
            plugins: HTMLCollectionOf<HTMLEmbedElement>;
            readyState: DocumentReadyState;
            referrer: string;
            rootElement: SVGSVGElement | null;
            scripts: HTMLCollectionOf<HTMLScriptElement>;
            scrollingElement: Element | null;
            timeline: DocumentTimeline;
            title: string;
            visibilityState: DocumentVisibilityState;
            vlinkColor: string;
            adoptNode<T extends Node>(node: T): T;
            captureEvents(): void;
            caretPositionFromPoint(x: number, y: number, options?: CaretPositionFromPointOptions): CaretPosition | null;
            caretRangeFromPoint(x: number, y: number): Range | null;
            clear(): void;
            close(): void;
            createAttribute(localName: string): Attr;
            createAttributeNS(namespace: string | null, qualifiedName: string): Attr;
            createCDATASection(data: string): CDATASection;
            createComment(data: string): Comment;
            createDocumentFragment(): DocumentFragment;
            createElement<K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];
            createElement<K extends keyof HTMLElementDeprecatedTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K];
            createElement(tagName: string, options?: ElementCreationOptions): HTMLElement;
            createElementNS(namespaceURI: "http://www.w3.org/1999/xhtml", qualifiedName: string): HTMLElement;
            createElementNS<K extends keyof SVGElementTagNameMap>(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: K): SVGElementTagNameMap[K];
            createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: string): SVGElement;
            createElementNS<K extends keyof MathMLElementTagNameMap>(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: K): MathMLElementTagNameMap[K];
            createElementNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: string): MathMLElement;
            createElementNS(namespaceURI: string | null, qualifiedName: string, options?: ElementCreationOptions): Element;
            createElementNS(namespace: string | null, qualifiedName: string, options?: string | ElementCreationOptions): Element;
            createEvent(eventInterface: "AnimationEvent"): AnimationEvent;
            createEvent(eventInterface: "AnimationPlaybackEvent"): AnimationPlaybackEvent;
            createEvent(eventInterface: "AudioProcessingEvent"): AudioProcessingEvent;
            createEvent(eventInterface: "BeforeUnloadEvent"): BeforeUnloadEvent;
            createEvent(eventInterface: "BlobEvent"): BlobEvent;
            createEvent(eventInterface: "ClipboardEvent"): ClipboardEvent;
            createEvent(eventInterface: "CloseEvent"): CloseEvent;
            createEvent(eventInterface: "CompositionEvent"): CompositionEvent;
            createEvent(eventInterface: "ContentVisibilityAutoStateChangeEvent"): ContentVisibilityAutoStateChangeEvent;
            createEvent(eventInterface: "CookieChangeEvent"): CookieChangeEvent;
            createEvent(eventInterface: "CustomEvent"): CustomEvent;
            createEvent(eventInterface: "DeviceMotionEvent"): DeviceMotionEvent;
            createEvent(eventInterface: "DeviceOrientationEvent"): DeviceOrientationEvent;
            createEvent(eventInterface: "DragEvent"): DragEvent;
            createEvent(eventInterface: "ErrorEvent"): ErrorEvent;
            createEvent(eventInterface: "Event"): Event;
            createEvent(eventInterface: "Events"): Event;
            createEvent(eventInterface: "FocusEvent"): FocusEvent;
            createEvent(eventInterface: "FontFaceSetLoadEvent"): FontFaceSetLoadEvent;
            createEvent(eventInterface: "FormDataEvent"): FormDataEvent;
            createEvent(eventInterface: "GamepadEvent"): GamepadEvent;
            createEvent(eventInterface: "HashChangeEvent"): HashChangeEvent;
            createEvent(eventInterface: "IDBVersionChangeEvent"): IDBVersionChangeEvent;
            createEvent(eventInterface: "InputEvent"): InputEvent;
            createEvent(eventInterface: "KeyboardEvent"): KeyboardEvent;
            createEvent(eventInterface: "MIDIConnectionEvent"): MIDIConnectionEvent;
            createEvent(eventInterface: "MIDIMessageEvent"): MIDIMessageEvent;
            createEvent(eventInterface: "MediaEncryptedEvent"): MediaEncryptedEvent;
            createEvent(eventInterface: "MediaKeyMessageEvent"): MediaKeyMessageEvent;
            createEvent(eventInterface: "MediaQueryListEvent"): MediaQueryListEvent;
            createEvent(eventInterface: "MediaStreamTrackEvent"): MediaStreamTrackEvent;
            createEvent(eventInterface: "MessageEvent"): MessageEvent;
            createEvent(eventInterface: "MouseEvent"): MouseEvent;
            createEvent(eventInterface: "MouseEvents"): MouseEvent;
            createEvent(eventInterface: "OfflineAudioCompletionEvent"): OfflineAudioCompletionEvent;
            createEvent(eventInterface: "PageRevealEvent"): PageRevealEvent;
            createEvent(eventInterface: "PageSwapEvent"): PageSwapEvent;
            createEvent(eventInterface: "PageTransitionEvent"): PageTransitionEvent;
            createEvent(eventInterface: "PaymentMethodChangeEvent"): PaymentMethodChangeEvent;
            createEvent(eventInterface: "PaymentRequestUpdateEvent"): PaymentRequestUpdateEvent;
            createEvent(eventInterface: "PictureInPictureEvent"): PictureInPictureEvent;
            createEvent(eventInterface: "PointerEvent"): PointerEvent;
            createEvent(eventInterface: "PopStateEvent"): PopStateEvent;
            createEvent(eventInterface: "ProgressEvent"): ProgressEvent;
            createEvent(eventInterface: "PromiseRejectionEvent"): PromiseRejectionEvent;
            createEvent(eventInterface: "RTCDTMFToneChangeEvent"): RTCDTMFToneChangeEvent;
            createEvent(eventInterface: "RTCDataChannelEvent"): RTCDataChannelEvent;
            createEvent(eventInterface: "RTCErrorEvent"): RTCErrorEvent;
            createEvent(eventInterface: "RTCPeerConnectionIceErrorEvent"): RTCPeerConnectionIceErrorEvent;
            createEvent(eventInterface: "RTCPeerConnectionIceEvent"): RTCPeerConnectionIceEvent;
            createEvent(eventInterface: "RTCTrackEvent"): RTCTrackEvent;
            createEvent(eventInterface: "SecurityPolicyViolationEvent"): SecurityPolicyViolationEvent;
            createEvent(eventInterface: "SpeechSynthesisErrorEvent"): SpeechSynthesisErrorEvent;
            createEvent(eventInterface: "SpeechSynthesisEvent"): SpeechSynthesisEvent;
            createEvent(eventInterface: "StorageEvent"): StorageEvent;
            createEvent(eventInterface: "SubmitEvent"): SubmitEvent;
            createEvent(eventInterface: "TextEvent"): TextEvent;
            createEvent(eventInterface: "ToggleEvent"): ToggleEvent;
            createEvent(eventInterface: "TouchEvent"): TouchEvent;
            createEvent(eventInterface: "TrackEvent"): TrackEvent;
            createEvent(eventInterface: "TransitionEvent"): TransitionEvent;
            createEvent(eventInterface: "UIEvent"): UIEvent;
            createEvent(eventInterface: "UIEvents"): UIEvent;
            createEvent(eventInterface: "WebGLContextEvent"): WebGLContextEvent;
            createEvent(eventInterface: "WheelEvent"): WheelEvent;
            createEvent(eventInterface: string): Event;
            createNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter | null): NodeIterator;
            createProcessingInstruction(target: string, data: string): ProcessingInstruction;
            createRange(): Range;
            createTextNode(data: string): Text;
            createTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter | null): TreeWalker;
            execCommand(commandId: string, showUI?: boolean, value?: string): boolean;
            exitFullscreen(): Promise<void>;
            exitPictureInPicture(): Promise<void>;
            exitPointerLock(): void;
            getElementById(elementId: string): HTMLElement | null;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByName(elementName: string): NodeListOf<HTMLElement>;
            getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
            getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
            getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
            getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
            getSelection(): Selection | null;
            hasFocus(): boolean;
            hasStorageAccess(): Promise<boolean>;
            importNode<T extends Node>(node: T, options?: boolean | ImportNodeOptions): T;
            open(unused1?: string, unused2?: string): Document;
            open(url: string | URL, name: string, features: string): WindowProxy | null;
            queryCommandEnabled(commandId: string): boolean;
            queryCommandIndeterm(commandId: string): boolean;
            queryCommandState(commandId: string): boolean;
            queryCommandSupported(commandId: string): boolean;
            queryCommandValue(commandId: string): string;
            releaseEvents(): void;
            requestStorageAccess(): Promise<void>;
            startViewTransition(callbackOptions?: ViewTransitionUpdateCallback | StartViewTransitionOptions): ViewTransition;
            write(...text: string[]): void;
            writeln(...text: string[]): void;
            textContent: null;
            addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            baseURI: string;
            childNodes: NodeListOf<ChildNode>;
            firstChild: ChildNode | null;
            isConnected: boolean;
            lastChild: ChildNode | null;
            nextSibling: ChildNode | null;
            nodeName: string;
            nodeType: number;
            nodeValue: string | null;
            parentElement: HTMLElement | null;
            parentNode: ParentNode | null;
            previousSibling: ChildNode | null;
            appendChild<T extends Node>(node: T): T;
            cloneNode(subtree?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node | null): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T extends Node>(node: T, child: Node | null): T;
            isDefaultNamespace(namespace: string | null): boolean;
            isEqualNode(otherNode: Node | null): boolean;
            isSameNode(otherNode: Node | null): boolean;
            lookupNamespaceURI(prefix: string | null): string | null;
            lookupPrefix(namespace: string | null): string | null;
            normalize(): void;
            removeChild<T extends Node>(child: T): T;
            replaceChild<T extends Node>(node: Node, child: T): T;
            ELEMENT_NODE: 1;
            ATTRIBUTE_NODE: 2;
            TEXT_NODE: 3;
            CDATA_SECTION_NODE: 4;
            ENTITY_REFERENCE_NODE: 5;
            ENTITY_NODE: 6;
            PROCESSING_INSTRUCTION_NODE: 7;
            COMMENT_NODE: 8;
            DOCUMENT_NODE: 9;
            DOCUMENT_TYPE_NODE: 10;
            DOCUMENT_FRAGMENT_NODE: 11;
            NOTATION_NODE: 12;
            DOCUMENT_POSITION_DISCONNECTED: 1;
            DOCUMENT_POSITION_PRECEDING: 2;
            DOCUMENT_POSITION_FOLLOWING: 4;
            DOCUMENT_POSITION_CONTAINS: 8;
            DOCUMENT_POSITION_CONTAINED_BY: 16;
            DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
            dispatchEvent(event: Event): boolean;
            activeElement: Element | null;
            adoptedStyleSheets: CSSStyleSheet[];
            fullscreenElement: Element | null;
            pictureInPictureElement: Element | null;
            pointerLockElement: Element | null;
            styleSheets: StyleSheetList;
            elementFromPoint(x: number, y: number): Element | null;
            elementsFromPoint(x: number, y: number): Element[];
            getAnimations(): Animation[];
            fonts: FontFaceSet;
            onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
            onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
            onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
            onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
            onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
            onauxclick: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
            onbeforematch: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onbeforetoggle: ((this: GlobalEventHandlers, ev: ToggleEvent) => any) | null;
            onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
            oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onclick: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oncontextmenu: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
            oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
            ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onerror: OnErrorEventHandler;
            onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
            onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
            ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
            onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
            onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
            onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
            onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointerrawupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
            onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
            onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
            onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
            onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            ontoggle: ((this: GlobalEventHandlers, ev: ToggleEvent) => any) | null;
            ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
            ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
            ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
            ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
            ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
            ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
            ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
            ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
            onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
            childElementCount: number;
            children: HTMLCollection;
            firstElementChild: Element | null;
            lastElementChild: Element | null;
            append(...nodes: (Node | string)[]): void;
            prepend(...nodes: (Node | string)[]): void;
            querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
            querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
            querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
            querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
            querySelector<E extends Element = Element>(selectors: string): E | null;
            querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
            querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
            querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
            querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
            querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
            replaceChildren(...nodes: (Node | string)[]): void;
            createExpression(expression: string, resolver?: XPathNSResolver | null): XPathExpression;
            createNSResolver(nodeResolver: Node): Node;
            evaluate(expression: string, contextNode: Node, resolver?: XPathNSResolver | null, type?: number, result?: XPathResult | null): XPathResult;
            _id: mongoose.Types.ObjectId;
            __v: number;
        };
        accessToken: string;
        refreshToken: string;
    }>;
    sendOtp(id: string): Promise<{
        message: string;
        otpSentTo: number;
    }>;
    otpVerification(dto: VerifyOtpDto, id: string): Promise<{
        message: string;
        data: {
            name: string;
            profilePic: string;
            contactNumber: number;
            refreshToken: string;
            isContactNumberVerified: boolean;
            role: "admin" | "user" | "super-admin" | "driver";
            location: {
                type: string;
                coordinates: number[];
            } & Location;
            vehicleDetails?: mongoose.Types.ObjectId;
            isVerified: boolean;
            payoutAccounts?: mongoose.Types.ObjectId[];
            earnings?: mongoose.Types.ObjectId;
            URL: string;
            alinkColor: string;
            all: HTMLAllCollection;
            anchors: HTMLCollectionOf<HTMLAnchorElement>;
            applets: HTMLCollection;
            bgColor: string;
            body: HTMLElement;
            characterSet: string;
            charset: string;
            compatMode: string;
            contentType: string;
            cookie: string;
            currentScript: HTMLOrSVGScriptElement | null;
            defaultView: (WindowProxy & typeof globalThis) | null;
            designMode: string;
            dir: string;
            doctype: DocumentType | null;
            documentElement: HTMLElement;
            documentURI: string;
            domain: string;
            embeds: HTMLCollectionOf<HTMLEmbedElement>;
            fgColor: string;
            forms: HTMLCollectionOf<HTMLFormElement>;
            fragmentDirective: FragmentDirective;
            fullscreen: boolean;
            fullscreenEnabled: boolean;
            head: HTMLHeadElement;
            hidden: boolean;
            images: HTMLCollectionOf<HTMLImageElement>;
            implementation: DOMImplementation;
            inputEncoding: string;
            lastModified: string;
            linkColor: string;
            links: HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>;
            onfullscreenchange: ((this: Document, ev: Event) => any) | null;
            onfullscreenerror: ((this: Document, ev: Event) => any) | null;
            onpointerlockchange: ((this: Document, ev: Event) => any) | null;
            onpointerlockerror: ((this: Document, ev: Event) => any) | null;
            onreadystatechange: ((this: Document, ev: Event) => any) | null;
            onvisibilitychange: ((this: Document, ev: Event) => any) | null;
            ownerDocument: null;
            pictureInPictureEnabled: boolean;
            plugins: HTMLCollectionOf<HTMLEmbedElement>;
            readyState: DocumentReadyState;
            referrer: string;
            rootElement: SVGSVGElement | null;
            scripts: HTMLCollectionOf<HTMLScriptElement>;
            scrollingElement: Element | null;
            timeline: DocumentTimeline;
            title: string;
            visibilityState: DocumentVisibilityState;
            vlinkColor: string;
            adoptNode<T extends Node>(node: T): T;
            captureEvents(): void;
            caretPositionFromPoint(x: number, y: number, options?: CaretPositionFromPointOptions): CaretPosition | null;
            caretRangeFromPoint(x: number, y: number): Range | null;
            clear(): void;
            close(): void;
            createAttribute(localName: string): Attr;
            createAttributeNS(namespace: string | null, qualifiedName: string): Attr;
            createCDATASection(data: string): CDATASection;
            createComment(data: string): Comment;
            createDocumentFragment(): DocumentFragment;
            createElement<K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];
            createElement<K extends keyof HTMLElementDeprecatedTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K];
            createElement(tagName: string, options?: ElementCreationOptions): HTMLElement;
            createElementNS(namespaceURI: "http://www.w3.org/1999/xhtml", qualifiedName: string): HTMLElement;
            createElementNS<K extends keyof SVGElementTagNameMap>(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: K): SVGElementTagNameMap[K];
            createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: string): SVGElement;
            createElementNS<K extends keyof MathMLElementTagNameMap>(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: K): MathMLElementTagNameMap[K];
            createElementNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: string): MathMLElement;
            createElementNS(namespaceURI: string | null, qualifiedName: string, options?: ElementCreationOptions): Element;
            createElementNS(namespace: string | null, qualifiedName: string, options?: string | ElementCreationOptions): Element;
            createEvent(eventInterface: "AnimationEvent"): AnimationEvent;
            createEvent(eventInterface: "AnimationPlaybackEvent"): AnimationPlaybackEvent;
            createEvent(eventInterface: "AudioProcessingEvent"): AudioProcessingEvent;
            createEvent(eventInterface: "BeforeUnloadEvent"): BeforeUnloadEvent;
            createEvent(eventInterface: "BlobEvent"): BlobEvent;
            createEvent(eventInterface: "ClipboardEvent"): ClipboardEvent;
            createEvent(eventInterface: "CloseEvent"): CloseEvent;
            createEvent(eventInterface: "CompositionEvent"): CompositionEvent;
            createEvent(eventInterface: "ContentVisibilityAutoStateChangeEvent"): ContentVisibilityAutoStateChangeEvent;
            createEvent(eventInterface: "CookieChangeEvent"): CookieChangeEvent;
            createEvent(eventInterface: "CustomEvent"): CustomEvent;
            createEvent(eventInterface: "DeviceMotionEvent"): DeviceMotionEvent;
            createEvent(eventInterface: "DeviceOrientationEvent"): DeviceOrientationEvent;
            createEvent(eventInterface: "DragEvent"): DragEvent;
            createEvent(eventInterface: "ErrorEvent"): ErrorEvent;
            createEvent(eventInterface: "Event"): Event;
            createEvent(eventInterface: "Events"): Event;
            createEvent(eventInterface: "FocusEvent"): FocusEvent;
            createEvent(eventInterface: "FontFaceSetLoadEvent"): FontFaceSetLoadEvent;
            createEvent(eventInterface: "FormDataEvent"): FormDataEvent;
            createEvent(eventInterface: "GamepadEvent"): GamepadEvent;
            createEvent(eventInterface: "HashChangeEvent"): HashChangeEvent;
            createEvent(eventInterface: "IDBVersionChangeEvent"): IDBVersionChangeEvent;
            createEvent(eventInterface: "InputEvent"): InputEvent;
            createEvent(eventInterface: "KeyboardEvent"): KeyboardEvent;
            createEvent(eventInterface: "MIDIConnectionEvent"): MIDIConnectionEvent;
            createEvent(eventInterface: "MIDIMessageEvent"): MIDIMessageEvent;
            createEvent(eventInterface: "MediaEncryptedEvent"): MediaEncryptedEvent;
            createEvent(eventInterface: "MediaKeyMessageEvent"): MediaKeyMessageEvent;
            createEvent(eventInterface: "MediaQueryListEvent"): MediaQueryListEvent;
            createEvent(eventInterface: "MediaStreamTrackEvent"): MediaStreamTrackEvent;
            createEvent(eventInterface: "MessageEvent"): MessageEvent;
            createEvent(eventInterface: "MouseEvent"): MouseEvent;
            createEvent(eventInterface: "MouseEvents"): MouseEvent;
            createEvent(eventInterface: "OfflineAudioCompletionEvent"): OfflineAudioCompletionEvent;
            createEvent(eventInterface: "PageRevealEvent"): PageRevealEvent;
            createEvent(eventInterface: "PageSwapEvent"): PageSwapEvent;
            createEvent(eventInterface: "PageTransitionEvent"): PageTransitionEvent;
            createEvent(eventInterface: "PaymentMethodChangeEvent"): PaymentMethodChangeEvent;
            createEvent(eventInterface: "PaymentRequestUpdateEvent"): PaymentRequestUpdateEvent;
            createEvent(eventInterface: "PictureInPictureEvent"): PictureInPictureEvent;
            createEvent(eventInterface: "PointerEvent"): PointerEvent;
            createEvent(eventInterface: "PopStateEvent"): PopStateEvent;
            createEvent(eventInterface: "ProgressEvent"): ProgressEvent;
            createEvent(eventInterface: "PromiseRejectionEvent"): PromiseRejectionEvent;
            createEvent(eventInterface: "RTCDTMFToneChangeEvent"): RTCDTMFToneChangeEvent;
            createEvent(eventInterface: "RTCDataChannelEvent"): RTCDataChannelEvent;
            createEvent(eventInterface: "RTCErrorEvent"): RTCErrorEvent;
            createEvent(eventInterface: "RTCPeerConnectionIceErrorEvent"): RTCPeerConnectionIceErrorEvent;
            createEvent(eventInterface: "RTCPeerConnectionIceEvent"): RTCPeerConnectionIceEvent;
            createEvent(eventInterface: "RTCTrackEvent"): RTCTrackEvent;
            createEvent(eventInterface: "SecurityPolicyViolationEvent"): SecurityPolicyViolationEvent;
            createEvent(eventInterface: "SpeechSynthesisErrorEvent"): SpeechSynthesisErrorEvent;
            createEvent(eventInterface: "SpeechSynthesisEvent"): SpeechSynthesisEvent;
            createEvent(eventInterface: "StorageEvent"): StorageEvent;
            createEvent(eventInterface: "SubmitEvent"): SubmitEvent;
            createEvent(eventInterface: "TextEvent"): TextEvent;
            createEvent(eventInterface: "ToggleEvent"): ToggleEvent;
            createEvent(eventInterface: "TouchEvent"): TouchEvent;
            createEvent(eventInterface: "TrackEvent"): TrackEvent;
            createEvent(eventInterface: "TransitionEvent"): TransitionEvent;
            createEvent(eventInterface: "UIEvent"): UIEvent;
            createEvent(eventInterface: "UIEvents"): UIEvent;
            createEvent(eventInterface: "WebGLContextEvent"): WebGLContextEvent;
            createEvent(eventInterface: "WheelEvent"): WheelEvent;
            createEvent(eventInterface: string): Event;
            createNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter | null): NodeIterator;
            createProcessingInstruction(target: string, data: string): ProcessingInstruction;
            createRange(): Range;
            createTextNode(data: string): Text;
            createTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter | null): TreeWalker;
            execCommand(commandId: string, showUI?: boolean, value?: string): boolean;
            exitFullscreen(): Promise<void>;
            exitPictureInPicture(): Promise<void>;
            exitPointerLock(): void;
            getElementById(elementId: string): HTMLElement | null;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByName(elementName: string): NodeListOf<HTMLElement>;
            getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
            getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
            getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
            getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
            getSelection(): Selection | null;
            hasFocus(): boolean;
            hasStorageAccess(): Promise<boolean>;
            importNode<T extends Node>(node: T, options?: boolean | ImportNodeOptions): T;
            open(unused1?: string, unused2?: string): Document;
            open(url: string | URL, name: string, features: string): WindowProxy | null;
            queryCommandEnabled(commandId: string): boolean;
            queryCommandIndeterm(commandId: string): boolean;
            queryCommandState(commandId: string): boolean;
            queryCommandSupported(commandId: string): boolean;
            queryCommandValue(commandId: string): string;
            releaseEvents(): void;
            requestStorageAccess(): Promise<void>;
            startViewTransition(callbackOptions?: ViewTransitionUpdateCallback | StartViewTransitionOptions): ViewTransition;
            write(...text: string[]): void;
            writeln(...text: string[]): void;
            textContent: null;
            addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            baseURI: string;
            childNodes: NodeListOf<ChildNode>;
            firstChild: ChildNode | null;
            isConnected: boolean;
            lastChild: ChildNode | null;
            nextSibling: ChildNode | null;
            nodeName: string;
            nodeType: number;
            nodeValue: string | null;
            parentElement: HTMLElement | null;
            parentNode: ParentNode | null;
            previousSibling: ChildNode | null;
            appendChild<T extends Node>(node: T): T;
            cloneNode(subtree?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node | null): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T extends Node>(node: T, child: Node | null): T;
            isDefaultNamespace(namespace: string | null): boolean;
            isEqualNode(otherNode: Node | null): boolean;
            isSameNode(otherNode: Node | null): boolean;
            lookupNamespaceURI(prefix: string | null): string | null;
            lookupPrefix(namespace: string | null): string | null;
            normalize(): void;
            removeChild<T extends Node>(child: T): T;
            replaceChild<T extends Node>(node: Node, child: T): T;
            ELEMENT_NODE: 1;
            ATTRIBUTE_NODE: 2;
            TEXT_NODE: 3;
            CDATA_SECTION_NODE: 4;
            ENTITY_REFERENCE_NODE: 5;
            ENTITY_NODE: 6;
            PROCESSING_INSTRUCTION_NODE: 7;
            COMMENT_NODE: 8;
            DOCUMENT_NODE: 9;
            DOCUMENT_TYPE_NODE: 10;
            DOCUMENT_FRAGMENT_NODE: 11;
            NOTATION_NODE: 12;
            DOCUMENT_POSITION_DISCONNECTED: 1;
            DOCUMENT_POSITION_PRECEDING: 2;
            DOCUMENT_POSITION_FOLLOWING: 4;
            DOCUMENT_POSITION_CONTAINS: 8;
            DOCUMENT_POSITION_CONTAINED_BY: 16;
            DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
            dispatchEvent(event: Event): boolean;
            activeElement: Element | null;
            adoptedStyleSheets: CSSStyleSheet[];
            fullscreenElement: Element | null;
            pictureInPictureElement: Element | null;
            pointerLockElement: Element | null;
            styleSheets: StyleSheetList;
            elementFromPoint(x: number, y: number): Element | null;
            elementsFromPoint(x: number, y: number): Element[];
            getAnimations(): Animation[];
            fonts: FontFaceSet;
            onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
            onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
            onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
            onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
            onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
            onauxclick: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
            onbeforematch: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onbeforetoggle: ((this: GlobalEventHandlers, ev: ToggleEvent) => any) | null;
            onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
            oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onclick: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oncontextmenu: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
            oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
            ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
            ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onerror: OnErrorEventHandler;
            onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
            onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
            ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
            onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
            onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
            onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
            onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
            onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onpointerrawupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
            onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
            onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
            onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
            onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
            onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            ontoggle: ((this: GlobalEventHandlers, ev: ToggleEvent) => any) | null;
            ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
            ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
            ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
            ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
            ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
            ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
            ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
            ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
            onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
            onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
            childElementCount: number;
            children: HTMLCollection;
            firstElementChild: Element | null;
            lastElementChild: Element | null;
            append(...nodes: (Node | string)[]): void;
            prepend(...nodes: (Node | string)[]): void;
            querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
            querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
            querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
            querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
            querySelector<E extends Element = Element>(selectors: string): E | null;
            querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
            querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
            querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
            querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
            querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
            replaceChildren(...nodes: (Node | string)[]): void;
            createExpression(expression: string, resolver?: XPathNSResolver | null): XPathExpression;
            createNSResolver(nodeResolver: Node): Node;
            evaluate(expression: string, contextNode: Node, resolver?: XPathNSResolver | null, type?: number, result?: XPathResult | null): XPathResult;
            _id: mongoose.Types.ObjectId;
            __v: number;
        };
    }>;
    login(logindto: LoginDto): Promise<{
        message: string;
        data: mongoose.Document<unknown, {}, import("../../comman/schema/user.schema").UserDocument, {}, {}> & import("../../comman/schema/user.schema").User & Document & {
            _id: mongoose.Types.ObjectId;
        } & {
            __v: number;
        };
        accessToken: string;
        refreshToken: string;
    }>;
    uploadProfilePic(request: Request, profilePicFile: Express.Multer.File, userId: string): Promise<import("../../comman/helpers/api-response").default<string>>;
}
